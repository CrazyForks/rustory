name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            exe: .exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            exe: .exe
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            exe: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            exe: ""
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            exe: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            exe: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive name
        id: archive
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            echo "name=rustory-${{ matrix.target }}.zip" >> $GITHUB_OUTPUT
          else
            echo "name=rustory-${{ matrix.target }}.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ steps.archive.outputs.name }} rustory${{ matrix.exe }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ steps.archive.outputs.name }} rustory${{ matrix.exe }}

      - name: Generate SHA256
        id: sha256
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            hash=$(sha256sum ${{ steps.archive.outputs.name }} | cut -d ' ' -f 1)
          else
            hash=$(shasum -a 256 ${{ steps.archive.outputs.name }} | cut -d ' ' -f 1)
          fi
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "${{ steps.archive.outputs.name }} \`$hash\`" > sha256.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: |
            ${{ steps.archive.outputs.name }}
            sha256.txt

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) | while read file; do
            cp "$file" release/
          done

      - name: Generate SHA256 list
        id: sha256-list
        run: |
          echo "## SHA256 Checksums" > SHA256SUMS.txt
          find artifacts -name "sha256.txt" | sort | while read file; do
            cat "$file" | while read line; do
              echo "- $line" >> SHA256SUMS.txt
            done
          done
          cat SHA256SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*
          body_path: SHA256SUMS.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
